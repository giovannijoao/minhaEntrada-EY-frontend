// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  email               String                @unique
  firstName           String
  lastName            String
  password            String
  JornadaSubscription JornadaSubscription[]
  AulaProgress        AulaProgress[]
  AppliedVacancy      AppliedVacancy[]
}

model JornadaSubscription {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @db.ObjectId
  jornadaId          Int
  availableTrilhas   Int[]
  TrilhaSubscription TrilhaSubscription[]
}

model TrilhaSubscription {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  trilhaId              Int
  jornadaSubscription   JornadaSubscription @relation(fields: [jornadaSubscriptionId], references: [id])
  jornadaSubscriptionId String
  isFinished            Boolean             @default(false)
  classesIds            Int[]
  finishedClasses       Int[]
  finalGrade            Int?
  AulaProgress          AulaProgress[]
}

model Answer {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  aulaId         Int
  question       Int
  answers        Int[]
  AulaProgress   AulaProgress? @relation(fields: [aulaProgressId], references: [id])
  aulaProgressId String?       @db.ObjectId
}

model AulaProgress {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @db.ObjectId
  aulaId               Int
  isClassFinished      Boolean             @default(false)
  isActivityFinished   Boolean             @default(false)
  hasActivity          Boolean?
  activityId           Int?
  answers              Answer[]
  totalQuestions       Int?
  totalCorrect         Int?
  finalGrade           Float?
  TrilhaSubscription   TrilhaSubscription? @relation(fields: [trilhaSubscriptionId], references: [id])
  trilhaSubscriptionId String?             @db.ObjectId
}

model AppliedVacancy {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  vagaId     Int
}
