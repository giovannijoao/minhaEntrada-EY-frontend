// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  email           String    @unique
  firstName       String
  lastName        String
  password        String
  bornDate        DateTime?
  profilePic      String?
  selectedProfile Int?

  JornadaSubscription JornadaSubscription[]
  AulaProgress        AulaProgress[]
  AppliedVacancy      AppliedVacancy[]
  TrilhaSubscription  TrilhaSubscription[]
  UserEducation       UserEducation[]
  UserCertification   UserCertification[]
  UserExperience      UserExperience[]
  UserScore           UserScore[]
}

model UserEducation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  school    String
  degree    String
  // fieldOfStudy String
  grade     String
  startDate DateTime
  endDate   DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model UserCertification {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  organization  String
  expiresAt     DateTime?
  issueDate     DateTime
  credentialId  String?
  credentialUrl String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model UserExperience {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  companyName String
  startDate   DateTime
  endDate     DateTime
  description String
  skills      String[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model UserScore {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  result Json

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model JornadaSubscription {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  user               User                 @relation(fields: [userId], references: [id])
  userId             String               @db.ObjectId
  jornadaId          Int
  availableTrilhas   Int[]                @default([])
  finishedTrilhas    Int[]                @default([])
  isFinished         Boolean?
  TrilhaSubscription TrilhaSubscription[]
  jornada            Json
}

model TrilhaSubscription {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  created_at            DateTime            @default(now())
  updated_at            DateTime            @updatedAt
  trilhaId              Int
  user                  User                @relation(fields: [userId], references: [id])
  userId                String              @db.ObjectId
  jornadaSubscription   JornadaSubscription @relation(fields: [jornadaSubscriptionId], references: [id])
  jornadaSubscriptionId String
  isFinished            Boolean             @default(false)
  classesIds            Int[]
  finishedClasses       Int[]
  finalGrade            Int?
  AulaProgress          AulaProgress[]
  hasEmblema            Boolean?
  emblema               Json?
}

model Answer {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  aulaId         Int
  question       Int
  answers        Int[]
  AulaProgress   AulaProgress? @relation(fields: [aulaProgressId], references: [id])
  aulaProgressId String?       @db.ObjectId
}

model AulaProgress {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  created_at           DateTime            @default(now())
  updated_at           DateTime            @updatedAt
  user                 User                @relation(fields: [userId], references: [id])
  userId               String              @db.ObjectId
  aulaId               Int
  isClassFinished      Boolean             @default(false)
  isActivityFinished   Boolean             @default(false)
  hasActivity          Boolean?
  activityId           Int?
  answers              Answer[]
  totalQuestions       Int?
  totalCorrect         Int?
  finalGrade           Float?
  TrilhaSubscription   TrilhaSubscription? @relation(fields: [trilhaSubscriptionId], references: [id])
  trilhaSubscriptionId String?             @db.ObjectId
}

model AppliedVacancy {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  vagaId     Int
  vaga       Json
}
